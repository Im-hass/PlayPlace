buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.17'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'kr.co.playplace'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

//ext {
//	set('snippetsDir', file("build/generated-snippets"))
//}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'


	implementation "io.jsonwebtoken:jjwt:0.9.1"
	//querydsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

	// batch
	implementation 'org.springframework.boot:spring-boot-starter-batch'

	//csv util
	// https://mvnrepository.com/artifact/com.opencsv/opencsv
	implementation 'com.opencsv:opencsv:5.7.1'

	// s3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// jsonobject
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'

	//geo-hash
	implementation 'ch.hsr:geohash:1.4.0'

	//rest docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.0'

	//google vision
//	implementation 'com.google.cloud:spring-cloud-gcp-starter'
//	implementation 'com.google.cloud:spring-cloud-gcp-starter-vision'

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.1"
		mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:3.1.0"
	}
}

//tasks.named('test') {
//	outputs.dir snippetsDir
//	useJUnitPlatform()
//}
//
//tasks.named('asciidoctor') {
//	inputs.dir snippetsDir
//	dependsOn test
//}
//
//asciidoctor {
//	dependsOn test
//	inputs.dir snippetsDir
//	outputDir file('src/docs/asciidoc')
//}


def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

//rest docs
ext { // 전역 변수
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'

	sources { // 특정 파일만 html로 만든다.
		include("**/index.adoc")
	}
	baseDirFollowsSourceFile() // 다른 adoc 파일을 include 할 때 경로를 baseDir로 맞춘다.
	dependsOn test
}

bootJar {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}